{"ast":null,"code":"import React,{useContext}from\"react\";import{useQuery}from\"@tanstack/react-query\";import axios from\"axios\";import{TabContext}from\"../context/TabContext.js\";import VideoPlayer from\"./VideoPlayer.jsx\";import TextContent from\"./TextContent.jsx\";import SimulationEmbed from\"./SimulationEmbed.jsx\";import QuizComponent from\"./QuizComponent.jsx\";import{jsx as _jsx}from\"react/jsx-runtime\";const ContentContainer=()=>{// Retrieve the currently selected topic from context\nconst{currentTopic}=useContext(TabContext);// Use React Query to fetch content for the selected topic\nconst{data,isLoading,error}=useQuery([\"content\",currentTopic],()=>axios.get(`/api/topics/${currentTopic}`).then(res=>res.data),{enabled:!!currentTopic// Only fetch if currentTopic is set\n});// Helper function to render content based on its type\nconst renderContent=section=>{var _section$questions$;switch(section.type){case\"video\":return/*#__PURE__*/_jsx(VideoPlayer,{url:section.url},section.url);case\"text\":return/*#__PURE__*/_jsx(TextContent,{content:section.content},section.content.slice(0,20));case\"simulation\":return/*#__PURE__*/_jsx(SimulationEmbed,{url:section.url},section.url);case\"quiz\":return/*#__PURE__*/_jsx(QuizComponent,{questions:section.questions},((_section$questions$=section.questions[0])===null||_section$questions$===void 0?void 0:_section$questions$.question)||\"quiz\");default:return null;}};// If no topic is selected, prompt the user to select one\nif(!currentTopic){return/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-center items-center h-full p-4\",children:/*#__PURE__*/_jsx(\"p\",{className:\"text-lg text-gray-600\",children:\"Please select a topic to view its content.\"})});}// Loading state\nif(isLoading){return/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-center items-center h-full p-4\",children:/*#__PURE__*/_jsx(\"p\",{className:\"text-lg text-gray-600\",children:\"Loading content...\"})});}// Error state\nif(error){return/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-center items-center h-full p-4\",children:/*#__PURE__*/_jsx(\"p\",{className:\"text-lg text-red-500\",children:\"Error loading content. Please try again later.\"})});}return/*#__PURE__*/_jsx(\"div\",{className:\"content-container mx-auto p-4\",children:data.sections&&data.sections.map(section=>renderContent(section))});};export default ContentContainer;","map":{"version":3,"names":["React","useContext","useQuery","axios","TabContext","VideoPlayer","TextContent","SimulationEmbed","QuizComponent","jsx","_jsx","ContentContainer","currentTopic","data","isLoading","error","get","then","res","enabled","renderContent","section","_section$questions$","type","url","content","slice","questions","question","className","children","sections","map"],"sources":["/home/ishan/WebstormProjects/content/client/src/components/ContentContainer.jsx"],"sourcesContent":["import React, { useContext } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport axios from \"axios\";\nimport { TabContext } from \"../context/TabContext.js\";\nimport VideoPlayer from \"./VideoPlayer.jsx\";\nimport TextContent from \"./TextContent.jsx\";\nimport SimulationEmbed from \"./SimulationEmbed.jsx\";\nimport QuizComponent from \"./QuizComponent.jsx\";\n\nconst ContentContainer = () => {\n    // Retrieve the currently selected topic from context\n    const { currentTopic } = useContext(TabContext);\n\n    // Use React Query to fetch content for the selected topic\n    const { data, isLoading, error } = useQuery(\n        [\"content\", currentTopic],\n        () => axios.get(`/api/topics/${currentTopic}`).then((res) => res.data),\n        {\n            enabled: !!currentTopic, // Only fetch if currentTopic is set\n        }\n    );\n\n    // Helper function to render content based on its type\n    const renderContent = (section) => {\n        switch (section.type) {\n            case \"video\":\n                return <VideoPlayer url={section.url} key={section.url} />;\n            case \"text\":\n                return <TextContent content={section.content} key={section.content.slice(0, 20)} />;\n            case \"simulation\":\n                return <SimulationEmbed url={section.url} key={section.url} />;\n            case \"quiz\":\n                return (\n                    <QuizComponent\n                        questions={section.questions}\n                        key={section.questions[0]?.question || \"quiz\"}\n                    />\n                );\n            default:\n                return null;\n        }\n    };\n\n    // If no topic is selected, prompt the user to select one\n    if (!currentTopic) {\n        return (\n            <div className=\"flex justify-center items-center h-full p-4\">\n                {/* Tailwind: Center content with flexbox */}\n                <p className=\"text-lg text-gray-600\">\n                    Please select a topic to view its content.\n                </p>\n            </div>\n        );\n    }\n\n    // Loading state\n    if (isLoading) {\n        return (\n            <div className=\"flex justify-center items-center h-full p-4\">\n                {/* Tailwind: Center text and style with text-gray-600 */}\n                <p className=\"text-lg text-gray-600\">Loading content...</p>\n            </div>\n        );\n    }\n\n    // Error state\n    if (error) {\n        return (\n            <div className=\"flex justify-center items-center h-full p-4\">\n                {/* Tailwind: Display error message in red */}\n                <p className=\"text-lg text-red-500\">\n                    Error loading content. Please try again later.\n                </p>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"content-container mx-auto p-4\">\n            {/* Tailwind: mx-auto centers the container, p-4 applies padding */}\n            {data.sections && data.sections.map((section) => renderContent(section))}\n        </div>\n    );\n};\n\nexport default ContentContainer;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,UAAU,KAAQ,OAAO,CACzC,OAASC,QAAQ,KAAQ,uBAAuB,CAChD,MAAO,CAAAC,KAAK,KAAM,OAAO,CACzB,OAASC,UAAU,KAAQ,0BAA0B,CACrD,MAAO,CAAAC,WAAW,KAAM,mBAAmB,CAC3C,MAAO,CAAAC,WAAW,KAAM,mBAAmB,CAC3C,MAAO,CAAAC,eAAe,KAAM,uBAAuB,CACnD,MAAO,CAAAC,aAAa,KAAM,qBAAqB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEhD,KAAM,CAAAC,gBAAgB,CAAGA,CAAA,GAAM,CAC3B;AACA,KAAM,CAAEC,YAAa,CAAC,CAAGX,UAAU,CAACG,UAAU,CAAC,CAE/C;AACA,KAAM,CAAES,IAAI,CAAEC,SAAS,CAAEC,KAAM,CAAC,CAAGb,QAAQ,CACvC,CAAC,SAAS,CAAEU,YAAY,CAAC,CACzB,IAAMT,KAAK,CAACa,GAAG,CAAC,eAAeJ,YAAY,EAAE,CAAC,CAACK,IAAI,CAAEC,GAAG,EAAKA,GAAG,CAACL,IAAI,CAAC,CACtE,CACIM,OAAO,CAAE,CAAC,CAACP,YAAc;AAC7B,CACJ,CAAC,CAED;AACA,KAAM,CAAAQ,aAAa,CAAIC,OAAO,EAAK,KAAAC,mBAAA,CAC/B,OAAQD,OAAO,CAACE,IAAI,EAChB,IAAK,OAAO,CACR,mBAAOb,IAAA,CAACL,WAAW,EAACmB,GAAG,CAAEH,OAAO,CAACG,GAAI,EAAMH,OAAO,CAACG,GAAM,CAAC,CAC9D,IAAK,MAAM,CACP,mBAAOd,IAAA,CAACJ,WAAW,EAACmB,OAAO,CAAEJ,OAAO,CAACI,OAAQ,EAAMJ,OAAO,CAACI,OAAO,CAACC,KAAK,CAAC,CAAC,CAAE,EAAE,CAAI,CAAC,CACvF,IAAK,YAAY,CACb,mBAAOhB,IAAA,CAACH,eAAe,EAACiB,GAAG,CAAEH,OAAO,CAACG,GAAI,EAAMH,OAAO,CAACG,GAAM,CAAC,CAClE,IAAK,MAAM,CACP,mBACId,IAAA,CAACF,aAAa,EACVmB,SAAS,CAAEN,OAAO,CAACM,SAAU,EACxB,EAAAL,mBAAA,CAAAD,OAAO,CAACM,SAAS,CAAC,CAAC,CAAC,UAAAL,mBAAA,iBAApBA,mBAAA,CAAsBM,QAAQ,GAAI,MAC1C,CAAC,CAEV,QACI,MAAO,KAAI,CACnB,CACJ,CAAC,CAED;AACA,GAAI,CAAChB,YAAY,CAAE,CACf,mBACIF,IAAA,QAAKmB,SAAS,CAAC,6CAA6C,CAAAC,QAAA,cAExDpB,IAAA,MAAGmB,SAAS,CAAC,uBAAuB,CAAAC,QAAA,CAAC,4CAErC,CAAG,CAAC,CACH,CAAC,CAEd,CAEA;AACA,GAAIhB,SAAS,CAAE,CACX,mBACIJ,IAAA,QAAKmB,SAAS,CAAC,6CAA6C,CAAAC,QAAA,cAExDpB,IAAA,MAAGmB,SAAS,CAAC,uBAAuB,CAAAC,QAAA,CAAC,oBAAkB,CAAG,CAAC,CAC1D,CAAC,CAEd,CAEA;AACA,GAAIf,KAAK,CAAE,CACP,mBACIL,IAAA,QAAKmB,SAAS,CAAC,6CAA6C,CAAAC,QAAA,cAExDpB,IAAA,MAAGmB,SAAS,CAAC,sBAAsB,CAAAC,QAAA,CAAC,gDAEpC,CAAG,CAAC,CACH,CAAC,CAEd,CAEA,mBACIpB,IAAA,QAAKmB,SAAS,CAAC,+BAA+B,CAAAC,QAAA,CAEzCjB,IAAI,CAACkB,QAAQ,EAAIlB,IAAI,CAACkB,QAAQ,CAACC,GAAG,CAAEX,OAAO,EAAKD,aAAa,CAACC,OAAO,CAAC,CAAC,CACvE,CAAC,CAEd,CAAC,CAED,cAAe,CAAAV,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}